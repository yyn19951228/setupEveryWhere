# Tips for my usage for coc-nvim

## General
1. Make sure that vim version is following the requirements, for now, vim should >= 8.0

2. The `go to definition` is different from vanilla vim. So in the configuration file provided by coc-nvim, the go to definition points to <coc-definitions>, and will be called by using `gd` by default, and the `<C-]>` is the default settings using tags, which will be superseded by coc-nvim

3. coc-extensions: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions

## Python
1. As mentioned in the coc-python, should set "python.jediEnabled" to false to use Microsoft Python Language Server(MPLS)
2. For import the module in the Project/Dir, MPLS might have issues identify them, so we need 
    1. First identify the Project/Dir, checkout here https://github.com/neoclide/coc.nvim/wiki/Using-workspaceFolders
    or using `:CocList folders` to check, the default settings is to find .git 
    2. Creating a .env file under Project/Dir, and add the following directories like 
    PYTHONPATH="src/directory1:src/directory2" for
    project-root
    ├── .git
    ├── .env
    └── src
	├── directory1
	│   ├── file1.py (import file2)
	│   └── file2.py (import file1)
	└── directory2
	    ├── file1.py (import file2)
	    └── file2.py (import file1)
    checkout here: https://github.com/neoclide/coc-python/issues/26
    3. If the above method doesn't work, we could also set autocomplete path for MPLS 
    ```
    {
	    "python.autoComplete.extraPaths": ["./projectmain"]
    }
    ```
3. Currently, I want to use coc-pyright for the type check, and coc-python for LSP, inorder to support that,
  I need to first set coc-python's interpreter by ":CocCommand python.setInterpreter" and set the interpreter for what I want,
  then I need to also set this interpreter for coc-pyright in the "CocConfig" with
    ```
    {
	    "python.pythonPath": ["path/to/interpreter"],
        "pyright.disableLanguageServices": true, # to disable the languague, only focus on type checking
    }
    ```


## GoLang
1. gopls is very stupid, if in some sub-directory the autoComplete or godo-definition not works, we could run `go mod init <mode_name>`, and generate the go.mod in that sub-directory



## JS/TS
1. Install coc-tsserver and coc-eslint, (I am not sure about coc-tslint-plugin) .
2. Some system default package might have such issues 
'''
import fs from 'fs'  # [tsserver 1192] [E] Module '"fs"' has no default export.
'''
write this line instead:
'''
import * as fs from 'fs'
'''


## C/C++
For C/C++, we will use coc-ccls, which is a very powerful LSP for C-family. Some settings for ccls
1. add .ccls under the root of project, for mac, take this as an example, notes that this is under macOS(darwin) platform
notes that .ccls may only works well for some small proj
```
clang
-I
src/include
-isystem
/Library/Developer/CommandLineTools/usr/include/c++/v1
-isystem
/usr/local/include
-std=c++17
-stdlib=libc++
-fPIC
```
1.5. Sometime, the .ccls file may work abnormally since it lacks many flags, so I prefer using cmake to regenerate the make file, as well as generate the 
compile_commands.json, to generate compile_commands.json, add -DCMAKE_EXPORT_COMPILE_COMMANDS=1 in the cmake, (could use cmake software), and put the 
compile_commands.json under the root/dir

2. how to install ccls on mac, pls done use homebrew, follow this instruction
https://zhuanlan.zhihu.com/p/84876003

获取ccls
ubuntu/linux用户可以通过官方文档编译安装

编译建议在安装了libclang后直接使用libclang编译，以下是ubuntu18.04编译的方法

sudo apt install clang libclang-dev
# 下载ccls源码
git clone https://github.com/MaskRay/ccls
cd ccls
# 在ccls根目录下执行
# 第0步，下载第三方依赖(主要是rapidjson)
git submodule update --init --recursive
# cmake 生成makefile
cmake -H. -Bbuild/Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
make -C ./build/Release -j4
sudo make install -C ./build/Release
如果最后一步出现了找不到optional头文件的问题，那你需要安装一个支持c++17的编译器，这里以clang-7为例，将上面的最后三句替换为

cmake -H. -Bbuild/Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=clang++-7
make -C ./build/Release -j4
sudo make install -C ./build/Release
如果想要指定ccls编译的llvm的版本的话可以在cmake的命令前加一句

# 以指定到llvm-7为例
cmake -H. -Bbuild/Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_CXX_COMPILER=clang++-7 \
          -DClang_DIR=/usr/lib/llvm-7/lib/cmake/clang \
          -DLLVM_DIR=/usr/lib/llvm-7/cmake/
make -C ./build/Release -j4
sudo make install -C ./build/Release
或者从官方下载预编译包开始入手

# 下载ccls源码
git clone https://github.com/MaskRay/ccls
cd ccls
# 在ccls根目录下执行
# 第0步，下载第三方依赖(主要是rapidjson)
git submodule update --init --recursive
# 第一步，下载llvm的二进制包
# 这一步可以用任何下载工具代替，只要使用的是这个网址的结果即可
wget -c http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
# 解压二进制包
tar xf clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
# 在当前文件目录下执行cmake 执行结果保存到Release文件夹中
cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$PWD/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04
cmake --build Release
# 开始编译并安装
cd Release
# 这里使用4线程编译，当然如果你的电脑够强的话，可以直接-j或者使用更搞核数加快编译
make -j4
# 编译完成，安装
sudo make install
mac用户想要使用最新版的ccls，那么在编译的时候必须指定llvm的版本，在通过homebrew下载llvm之后，可以通过以下操作安装

# 下载依赖
brew install llvm
# 下载ccls源码
git clone https://github.com/MaskRay/ccls
cd ccls
# 在ccls根目录下执行
# 第0步，下载第三方依赖(主要是rapidjson)
git submodule update --init --recursive
cmake -H. -Bbuild/Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DClang_DIR=/usr/local/opt/llvm/lib/cmake/clang \
          -DLLVM_DIR=/usr/local/opt/llvm/lib/cmake
make -C ./build/Release -j
sudo make install -C ./build/Release
需要注意的是如果安装了brew里的rapidjson似乎会造成找不到json头文件的问题。可以在cmake中增加-DUSE_SYSTEM_RAPIDJSON=off参数不使用brew安装的版本

当然home-brew中提供了更简单的安装方式，但是那个版本和最新版已经相差半年，两者的性能差距较大，这里不建议安装brew的版本
