# Tips for my usage for coc-nvim

## General
1. Make sure that vim version is following the requirements, for now, vim should >= 8.0

2. The `go to definition` is different from vanilla vim. So in the configuration file provided by coc-nvim, the go to definition points to <coc-definitions>, and will be called by using `gd` by default, and the `<C-]>` is the default settings using tags, which will be superseded by coc-nvim

3. coc-extensions: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions

## Python
1. As mentioned in the coc-python, should set "python.jediEnabled" to false to use Microsoft Python Language Server(MPLS)
2. For import the module in the Project/Dir, MPLS might have issues identify them, so we need 
    1. First identify the Project/Dir, checkout here https://github.com/neoclide/coc.nvim/wiki/Using-workspaceFolders
    or using `:CocList folders` to check, the default settings is to find .git 
    2. Creating a .env file under Project/Dir, and add the following directories like 
    PYTHONPATH="src/directory1:src/directory2" for
    project-root
    ├── .git
    ├── .env
    └── src
	├── directory1
	│   ├── file1.py (import file2)
	│   └── file2.py (import file1)
	└── directory2
	    ├── file1.py (import file2)
	    └── file2.py (import file1)
    checkout here: https://github.com/neoclide/coc-python/issues/26
    3. If the above method doesn't work, we could also set autocomplete path for MPLS 
    ```
    {
	    "python.autoComplete.extraPaths": ["./projectmain"]
    }
    ```


## GoLang
1. gopls is very stupid, if in some sub-directory the autoComplete or godo-definition not works, we could run `go mod init <mode_name>`, and generate the go.mod in that sub-directory



## JS/TS


## C/C++
For C/C++, we will use coc-ccls, which is a very powerful LSP for C-family. Some settings for ccls
1. add .ccls under the root of project, for mac, take this as an example, notes that this is under macOS(darwin) platform
```
clang
-I
src/include
-isystem
/Library/Developer/CommandLineTools/usr/include/c++/v1
-isystem
/usr/local/include
-std=c++17
-stdlib=libc++
-fPIC
```
